{"version":3,"file":"static/js/890.7ab45d19.chunk.js","mappings":"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","sources":["webpack://react-kbzd1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileStatus/ProfileStatusWithHooks.jsx","components/Profile/Profile.module.css","components/Profile/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://react-kbzd1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-kbzd1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostFormRedux.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__SVIli\",\"link\":\"ProfileInfo_link__qf6L-\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__WbPYZ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__WODZ2\",\"contact\":\"ProfileInfo_contact__Kv6dJ\"};","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b> Status: </b> <span onMouseMove={activateEditMode}>{props.status || 'please, add status'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\r\nimport s from '../Profile/Profile.module.css';\r\nimport {createField, Input, Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../Common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n\r\n            <div>\r\n                <b>Full Name</b> :\r\n                {createField('Full Name', 'fullName', [], Input)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking For A Job</b> :\r\n                {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>My Professional Skills</b> :\r\n                {createField('My Professional Skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>About Me</b> :\r\n                {createField('About Me', 'aboutMe', [], Textarea)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts</b> : {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../../src/assets/images/user.png';\r\nimport ProfileDataForm from \"../ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        //console.log(formData);\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt={'alt'}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n                </div>}\r\n\r\n            <div>\r\n                <b>Full Name</b> : {profile.fullName}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking For A Job</b> : {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b> : {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__tZOPO\",\"posts\":\"MyPosts_posts__8D8p0\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__z4HKZ\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://cdn-icons-png.flaticon.com/512/3388/3388668.png' />\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likesCount}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Post;","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit = {props.handleSubmit}>\r\n                <div>\r\n                    <Field  name='newPostText' component={Textarea} placeholder={'Post Message'}\r\n                           validate = {[required, maxLength10]}/>\r\n                </div>\r\n                <div>\r\n                    <button>Add Post</button>\r\n                </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm({form: 'postAddPostForm'})(AddPostForm);\r\n\r\nexport default AddPostFormRedux;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddPostFormRedux from '../MyPosts/AddPostFormRedux'\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n//    console.log('r');\r\n\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n\r\n    let addNewPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {useLocation, useNavigate, useParams} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.router.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    });\r\n}\r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, navigate, params}}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onMouseMove","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","alt","target","files","length","initialValues","formData","then","message","likesCount","maxLength10","maxLengthCreator","Field","name","component","placeholder","validate","required","React","postsElements","posts","reverse","p","id","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileContainer","userId","this","router","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams"],"sourceRoot":""}